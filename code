
/*
 pin configurations
 * keypad
 * rows    IN
 * r1= b7
 * r2= b6
 * r3= b5
 * r4= b4
 * columns   OUT
 * c1= b2
 * c2 = b1
 * c3= b0

 * motor driver  OUT
 * xmf = d0
 * xmb = d1
 * ymf = d2
 * ymb = d3

 * limit switches   IN
 * x0 = c0
 * x1 = c1
 * x2 = c2
 * x3 = c3
 * y0 = c4
 * y1 = c5
 * y2 = c6
 * y3 = c7
 
 * indicator LEDs
  D4 , D5, D6, D7
 * ir sensors   IN
 * x axis = c1
 * y axis = c5

 * servo    OUT
 * signal  E1
 */

#define _XTAL_FREQ 4000000
#define TMR2PRESCALE 4

#include <xc.h>
#pragma config FOSC = HS   // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF  // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON  // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF   // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF   // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF   // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF   // Flash Program Memory Code Protection bit (Code protection off)

int winchecks[24][2] = {{0,1},{0,2},{1,2},{3,4},{3,5},{4,5},{6,7},{7,8},{6,8},{0,3},{3,6},{0,6},{1,4},{1,7},{4,7},{2,5},{5,8},{2,8},{0,4},{0,8},{4,8},{2,4},{4,6},{2,6}};
int wins[8][3] = {{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{0,4,8},{2,4,6}};
int board[9] = {0,0,0,0,0,0,0,0,0};
int a=0;
int draw = -1;
int player =0;
int xgo=0;
int ygo=0;

void servoRotate0(){
  unsigned int i;
  for(i=0;i<50;i++)
  {
    RE1 = 1;
    __delay_us(800);
    RE1 = 0;
    __delay_us(19200);
  }
}
void servoRotate90(){
  unsigned int i;
  for(i=0;i<50;i++)
  {
    RE1 = 1;
    __delay_us(1500);
    RE1 = 0;
    __delay_us(18500);
  }
}
void servoRotate180(){
  unsigned int i;
  for(i=0;i<50;i++)
  {
    RE1 = 1;
    __delay_us(2200);
    RE1 = 0;
    __delay_us(17800);
  }
}
void stencil(){
    servoRotate90(); //90 Degree
    __delay_ms(500);
    servoRotate0(); //0 Degree
    __delay_ms(1000);
    servoRotate90(); //90 Degree
    __delay_ms(500);
    
}
void comeback2(){  //rotates the motors such that the writing tool returns to the original position
    int xback=0;
    int yback=0;
    PORTDbits.RD5 = 1;
    __delay_ms(1000);
    PORTDbits.RD5 = 0;
    
    
    PORTDbits.RD1 = 1;
    PORTDbits.RD0 = 0;
    __delay_ms(4000);
    while(1){
        PORTDbits.RD1 = 1;
        PORTDbits.RD0 = 0;
        //xgoforward();
        if (RC1 ==0){
            xback++;
            if (xback== xgo){
                PORTDbits.RD0 = 0;
                PORTDbits.RD1 = 0;
                // brake();
                break;
            }
            else{
            PORTDbits.RD0 = 0;
            PORTDbits.RD1 = 1;//xgoforward();
            __delay_ms(5000);
            }
        }
        else{
            PORTDbits.RD0 = 0;
            PORTDbits.RD1 = 1;//xgoforward();
            }
        }
        
    PORTDbits.RD2 = 0;
    PORTDbits.RD3 = 1;
    __delay_ms(4000);
    
    while(1){
        PORTDbits.RD2 = 0;
        PORTDbits.RD3 = 1;//ygoforward();
        if (RC5 ==0){
            yback++;
            if (yback== ygo){
                PORTDbits.RD2 = 0;
                PORTDbits.RD3 = 0;
                //brake();
                break;
            }
            else{
            PORTDbits.RD2 = 0;
            PORTDbits.RD3 = 1;//ygoforward();
            __delay_ms(5000);
            }
        }
        else{
            PORTDbits.RD2 = 0;
            PORTDbits.RD3 = 1;//ygoforward();
            }
        }

    PORTDbits.RD5 = 1;
    __delay_ms(500);
    PORTDbits.RD5 = 0;
    __delay_ms(500);
    PORTDbits.RD5 = 1;
    __delay_ms(500);
    PORTDbits.RD5 = 0;
    __delay_ms(500);
    stencil();
}
void newdrawy(){            // writing moves to the particular position played by the computer 
    xgo = 3-(draw%3);
    ygo = 3- (draw/3);
    int xstate=0;
    int ystate=0;
    PORTDbits.RD5 = 1;
    __delay_ms(1000);
    PORTDbits.RD5 = 0;
    
    
    PORTDbits.RD0 = 1;
    PORTDbits.RD1 = 0;
    __delay_ms(4000);
    while(1){
        PORTDbits.RD0 = 1;
        PORTDbits.RD1 = 0;
        //xgoforward();
        if (RC1 ==0){
            xstate++;
            if (xstate== xgo){
                PORTDbits.RD0 = 0;
                PORTDbits.RD1 = 0;
                // brake();
                break;
            }
            else{
            PORTDbits.RD0 = 1;
            PORTDbits.RD1 = 0;//xgoforward();
            __delay_ms(5000);
            }
        }
        else{
            PORTDbits.RD0 = 1;
            PORTDbits.RD1 = 0;//xgoforward();
            }
        }
        
    PORTDbits.RD2 = 1;
    PORTDbits.RD3 = 0;
    __delay_ms(4000);
    
    while(1){
        PORTDbits.RD2 = 1;
        PORTDbits.RD3 = 0;//ygoforward();
        if (RC5 ==0){
            ystate++;
            if (ystate== ygo){
                PORTDbits.RD2 = 0;
                PORTDbits.RD3 = 0;
                //brake();
                break;
            }
            else{
            PORTDbits.RD2 = 1;
            PORTDbits.RD3 = 0;//ygoforward();
            __delay_ms(5000);
            }
        }
        else{
            PORTDbits.RD2 = 1;
            PORTDbits.RD3 = 0;//ygoforward();
            }
        }

    PORTDbits.RD5 = 1;
    __delay_ms(500);
    PORTDbits.RD5 = 0;
    __delay_ms(500);
    PORTDbits.RD5 = 1;
    __delay_ms(500);
    PORTDbits.RD5 = 0;
    stencil();
    comeback2();
    
    }
void xgoforward(){     // rotates the motor in the x axis forward
     /* xmf = d0
 * xmb = d1*/

    PORTDbits.RD0 = 1;
    PORTDbits.RD1 = 0;

 }
void ygoforward(){  //rotates the motor in the y axis forward
     /*
 * ymf = d2
 * ymb = d3*/

 PORTDbits.RD2 = 1;
 PORTDbits.RD3 = 0;

}
void brake(){   //stopes the motors
    PORTDbits.RD0 = 0;
    PORTDbits.RD1 = 0;

    PORTDbits.RD2 = 0;
    PORTDbits.RD3 = 0;
}
void getkey(){   //gets the input from the keypad, played by the human player

    a= 0;
    while(1){
        PORTBbits.RB0 = 0;
        PORTBbits.RB1 = 0;
        PORTBbits.RB2 = 1;
        if (RB7==1){
            a = 7;
            break;
        }
        if (RB6==1){
            a = 8;
            break;
        }
        if (RB5==1){
            a = 9;
            break;
        }
        if (RB4==1){
            a = 10;
            break;
        }


        PORTBbits.RB0 = 0;
        PORTBbits.RB1 = 1;
        PORTBbits.RB2 = 0;
        if (RB7==1){
            a = 4;
            break;
        }
        if (RB6==1){
            a = 5;
            break;
        }
        if (RB5==1){
            a = 6;
            break;
        }
        if (RB4==1){
            a = 11;
            break;
        }

        PORTBbits.RB0 = 1;
        PORTBbits.RB1 = 0;
        PORTBbits.RB2 = 0;
        if (RB7==1){
            a = 1;
            break;
        }
        if (RB6==1){
            a = 2;
            break;
        }
        if (RB5==1){
            a = 3;
            break;
        }
        if (RB4==1){
            a = 12;
            break;
        }

    }




}
int first(){   //determines if the human player wants to play first or second

    while( a!=1 && a!= 2){
        getkey();
    }
    if (a==1){
            player =1;
        }
    if (a==2){
            player =2;
        }
    return player;
}
void init(){   //configures the pins of the PIC as input or output

TRISBbits.TRISB0 = 0;
TRISBbits.TRISB1 = 0;
TRISBbits.TRISB2 = 0;


TRISBbits.TRISB4 = 1;
TRISBbits.TRISB5 = 1;
TRISBbits.TRISB6 = 1;
TRISBbits.TRISB7 = 1;

TRISDbits.TRISD0 = 0;
TRISDbits.TRISD1 = 0;
TRISDbits.TRISD2 = 0;
TRISDbits.TRISD3 = 0;
TRISDbits.TRISD4 = 0;
TRISDbits.TRISD5 = 0;
TRISDbits.TRISD6 = 0;
TRISDbits.TRISD7 = 0;

TRISCbits.TRISC1 = 1;
TRISCbits.TRISC5 = 1;

TRISEbits.TRISE1=0;
//TRISCbits.TRISC7 = 0;


    PORTDbits.RD0 = 0;
    PORTDbits.RD1 = 0;
    PORTDbits.RD2 = 0;
    PORTDbits.RD3 = 0;

    PORTBbits.RB1 = 0;
    PORTBbits.RB2 = 0;
    PORTBbits.RB3 = 0;
    servoRotate90(); //90 Degree
    __delay_ms(500);

}
int win(const int board[9]) {
    //determines if a player has won, returns 0 otherwise.
    //unsigned wins[8][3] = {{0,1,2},{3,4,5},{6,7,8},{0,3,6},{1,4,7},{2,5,8},{0,4,8},{2,4,6}};
    int i;
    for(i = 0; i < 8; ++i) {
        if(board[wins[i][0]] != 0 &&
           board[wins[i][0]] == board[wins[i][1]] &&
           board[wins[i][0]] == board[wins[i][2]])
            return board[wins[i][2]];
    }
    return 0;
}
void randomMove(int board[]){  //generates and plays a random move 
    int count=0;
    int i=0;

    for(i = 0; i < 9; ++i) {

        if( board[i]==0){
            count++;
        }
    }
    int r = rand()%count;
    //printf("%d",randy()%count);
    int h=-1;
    for(i = 0; i < 9; ++i) {
        if( board[i]==0){
            h++;
        }
        if (h== r){
            //printf("ok");
            board[i]=1;
            draw = i;
            newdrawy();
            return;
        }
    }
}
int wincheck(int board[]){   // checks if the human player or the computer has a chance to win in the next move 
    int q=0;
    while(q<24){
        //int a= winchecks[q][0];
        if (board[winchecks[q][0]]==board[winchecks[q][1]] && board[winchecks[q][0]]==1 && (board[wins[q/3][0]]!=-1 && board[wins[q/3][1]]!=-1 && board[wins[q/3][2]]!=-1 )){
            return q;//ans[2];
        }
        q++;
    }

    int b=0;
    while(b<24){
        if (board[winchecks[b][0]]==board[winchecks[b][1]] && board[winchecks[b][0]]==-1 && (board[wins[b/3][0]]!=1 && board[wins[b/3][1]]!=1 && board[wins[b/3][2]]!=1 )){

            return b;
        }
        b++;
    }
    return -1;
    }
void computerMove(int board[]) {   //move done by the robot
    PORTDbits.RD7 = 1;
    __delay_ms(1000);
    PORTDbits.RD7 = 0;
    
    int p =wincheck(board);
    if (p ==-1){
        randomMove(board);
    }

    else
    {   p /=3;
        int k =0;
        while(k<3){
            if(board[wins[p][k]]==0){
                board[wins[p][k]]= 1;
                draw = wins[p][k];
                newdrawy();
                return;
            }
            k++;
        }
    }

}
void playerMove(int board[9]) {    //move of the human player
    PORTDbits.RD6 = 1;
    __delay_ms(1000);
    PORTDbits.RD6 = 0;
    int move =0;
    a = 0;
    do {
        while (a==0){
            getkey();
        }
        move = a-1;
    } while (move >= 9 || move < 0 && board[move] == 0);
    board[move] = -1;
    PORTDbits.RD6 = 1;
    __delay_ms(1000);
    PORTDbits.RD6 = 0;
    
}
int main() {              //calls the previous functions in the required order to run the tic tac toe machine
    init();
    stencil();
    player=0;
    player = first();
    if(player!=0){
    PORTDbits.RD4 = 1;
    __delay_ms(1000);
    PORTDbits.RD4 = 0;
    }
    int turn;
    for(turn = 0; turn < 9 && win(board) == 0; ++turn) {
        if((turn+player) % 2 == 0)
            computerMove(board);
        else {
            playerMove(board);
        }
    }
    while(1){
        PORTDbits.RD6 = 1;
        __delay_ms(500);
        PORTDbits.RD6 = 0;
        __delay_ms(500);
    }
}

